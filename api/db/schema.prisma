// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

// https://github.com/prisma/prisma/discussions/19188

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["prismaSchemaFolder", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  directUrl = env("DIRECT_URL")
  url       = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid()) @db.Uuid
  displayName         String?
  email               String        @unique
  avatarUrl           String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt
  bio                 String?       @db.VarChar(100)
  birthday            DateTime?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  Button              Button[]
  ButtonClick         ButtonClick[]
  Audit               Audit[]
}

model Audit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  log       String
}

model Button {
  id        String    @id @default(uuid()) // Unique identifier for each button
  name      String // Button name for the user to identify it
  createdAt DateTime  @default(now()) // When the button was created
  updatedAt DateTime  @updatedAt // When the button was last updated
  expiresAt DateTime? // Optional expiration date

  text          String? // Text to display on the button
  textColor     String? // Text color (hex code)
  textShadow    String?
  textTransform String?
  fontFamily    String?
  fontWeight    String?

  backgroundColor        String? // Background color
  backgroundColorHover   String? // Background color on hover
  backgroundColorActive  String? // Background color when active
  backgroundGradient     Boolean? @default(false) // Use gradient for background
  backgroundGradientFrom String? // Gradient start color
  backgroundGradientTo   String? // Gradient end color
  backgroundGradientDeg  Int?     @default(0) // Gradient direction in degrees

  backgroundImg String? // Background image URL
  borderRadius  Int?    @default(0) // Border radius (e.g., pixels)
  borderStyle   String? @default("solid") // Style of the border (e.g., solid, dashed)
  borderWidth   Int?    @default(0) // Width of the border (e.g., pixels)

  hoverState       Json? // Customizable hover state (JSON object for flexibility)
  clickedState     Json? // State after the button has been clicked
  clickCount       Int   @default(0) // Number of clicks the button has received
  maxClicksPerDay  Int   @default(1000) // Max clicks allowed per day by all users
  maxClicksPerUser Int   @default(5) // Max clicks allowed per user or overall
  size             Float @default(1.0) // Relative size of the button, grows with clicks

  message      String? // Message to display when the button hovered
  messageColor String? // Text color for the message
  messageBg    String? // Background color for the message
  messageBgImg String? // Background image for the message

  // cssStyle Json? // Custom user CSS styles for the button

  // animation Json? // JSON object for animations (e.g., bounce, fade)
  // behavior  Json? // Additional behaviors like triggers or events

  disabled  Boolean @default(false) // Marks whether the button is disabled
  isVisible Boolean @default(true) // Controls if the button is visible on the wall
  // isActive  Boolean @default(true) // Marks whether the button can be interacted with

  creatorId String @db.Uuid // ID of the user who created the button
  creator   User   @relation(fields: [creatorId], references: [id])

  uniqueClicks Int @default(0) // Number of unique users who clicked

  wallId      Int // ID of the wall the button belongs to
  wall        Wall          @relation(fields: [wallId], references: [id])
  ButtonClick ButtonClick[]
  Tag         Tag[]

  @@index([creatorId])
  @@index([wallId])
  @@index([isVisible])
  @@index([clickCount])
  @@index([uniqueClicks])
  @@index([createdAt])
}

model ButtonClick {
  id        BigInt   @id @default(autoincrement()) // Unique identifier for each button click
  createdAt DateTime @default(now()) // When the button was clicked

  ipAddress String?
  buttonId  String // ID of the button that was clicked
  button    Button  @relation(fields: [buttonId], references: [id])

  userId String @db.Uuid // ID of the user who clicked the button
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([buttonId])
}

model Wall {
  id        Int      @id @default(autoincrement()) // Unique identifier for each wall
  name      String? // Name for the custom wall
  createdAt DateTime @default(now()) // When the wall was created
  updatedAt DateTime @updatedAt // When the wall was last updated

  title       String // Title or label for the wall
  number      Int     @unique // Number of the wall
  description String? // Description or additional information
  maxClicks   Int     @default(10000) // Max clicks allowed per Wall

  buttons Button[] // Buttons associated with the wall

  @@index([number])
  @@index([createdAt])
}

model Tag {
  id        Int      @id @default(autoincrement()) // Unique identifier for each tag
  name      String   @unique // Name of the tag
  createdAt DateTime @default(now()) // When the tag was created
  updatedAt DateTime @updatedAt // When the tag was last updated

  buttons Button[] // Buttons associated with the tag

  @@index([name])
}

model RW_DataMigration {
  version    String   @id
  name       String
  startedAt  DateTime
  finishedAt DateTime
}
